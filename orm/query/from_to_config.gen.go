// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"drtech.co/gl2gl/orm/model"
)

func newFromToConfig(db *gorm.DB) fromToConfig {
	_fromToConfig := fromToConfig{}

	_fromToConfig.fromToConfigDo.UseDB(db)
	_fromToConfig.fromToConfigDo.UseModel(&model.FromToConfig{})

	tableName := _fromToConfig.fromToConfigDo.TableName()
	_fromToConfig.ALL = field.NewField(tableName, "*")
	_fromToConfig.ID = field.NewField(tableName, "id")
	_fromToConfig.FromAddress = field.NewField(tableName, "from_address")
	_fromToConfig.FromAccessToken = field.NewField(tableName, "from_access_token")
	_fromToConfig.ToAddress = field.NewField(tableName, "to_address")
	_fromToConfig.ToAccessToken = field.NewField(tableName, "to_access_token")
	_fromToConfig.Status = field.NewField(tableName, "status")
	_fromToConfig.DeleteBranch = field.NewField(tableName, "delete_ branch")
	_fromToConfig.LastSyncTime = field.NewField(tableName, "last_sync_time")
	_fromToConfig.LastSyncStatus = field.NewField(tableName, "last_sync_status")

	_fromToConfig.fillFieldMap()

	return _fromToConfig
}

type fromToConfig struct {
	fromToConfigDo fromToConfigDo

	ALL             field.Field
	ID              field.Field
	FromAddress     field.Field
	FromAccessToken field.Field
	ToAddress       field.Field
	ToAccessToken   field.Field
	Status          field.Field
	DeleteBranch    field.Field
	LastSyncTime    field.Field
	LastSyncStatus  field.Field

	fieldMap map[string]field.Expr
}

func (f fromToConfig) Table(newTableName string) *fromToConfig {
	f.fromToConfigDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fromToConfig) As(alias string) *fromToConfig {
	f.fromToConfigDo.DO = *(f.fromToConfigDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fromToConfig) updateTableName(table string) *fromToConfig {
	f.ALL = field.NewField(table, "*")
	f.ID = field.NewField(table, "id")
	f.FromAddress = field.NewField(table, "from_address")
	f.FromAccessToken = field.NewField(table, "from_access_token")
	f.ToAddress = field.NewField(table, "to_address")
	f.ToAccessToken = field.NewField(table, "to_access_token")
	f.Status = field.NewField(table, "status")
	f.DeleteBranch = field.NewField(table, "delete_ branch")
	f.LastSyncTime = field.NewField(table, "last_sync_time")
	f.LastSyncStatus = field.NewField(table, "last_sync_status")

	f.fillFieldMap()

	return f
}

func (f *fromToConfig) WithContext(ctx context.Context) *fromToConfigDo {
	return f.fromToConfigDo.WithContext(ctx)
}

func (f fromToConfig) TableName() string { return f.fromToConfigDo.TableName() }

func (f fromToConfig) Alias() string { return f.fromToConfigDo.Alias() }

func (f *fromToConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fromToConfig) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["from_address"] = f.FromAddress
	f.fieldMap["from_access_token"] = f.FromAccessToken
	f.fieldMap["to_address"] = f.ToAddress
	f.fieldMap["to_access_token"] = f.ToAccessToken
	f.fieldMap["status"] = f.Status
	f.fieldMap["delete_ branch"] = f.DeleteBranch
	f.fieldMap["last_sync_time"] = f.LastSyncTime
	f.fieldMap["last_sync_status"] = f.LastSyncStatus
}

func (f fromToConfig) clone(db *gorm.DB) fromToConfig {
	f.fromToConfigDo.ReplaceDB(db)
	return f
}

type fromToConfigDo struct{ gen.DO }

func (f fromToConfigDo) Debug() *fromToConfigDo {
	return f.withDO(f.DO.Debug())
}

func (f fromToConfigDo) WithContext(ctx context.Context) *fromToConfigDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fromToConfigDo) Clauses(conds ...clause.Expression) *fromToConfigDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fromToConfigDo) Returning(value interface{}, columns ...string) *fromToConfigDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fromToConfigDo) Not(conds ...gen.Condition) *fromToConfigDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fromToConfigDo) Or(conds ...gen.Condition) *fromToConfigDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fromToConfigDo) Select(conds ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fromToConfigDo) Where(conds ...gen.Condition) *fromToConfigDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fromToConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *fromToConfigDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f fromToConfigDo) Order(conds ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fromToConfigDo) Distinct(cols ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fromToConfigDo) Omit(cols ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fromToConfigDo) Join(table schema.Tabler, on ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fromToConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fromToConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fromToConfigDo) Group(cols ...field.Expr) *fromToConfigDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fromToConfigDo) Having(conds ...gen.Condition) *fromToConfigDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fromToConfigDo) Limit(limit int) *fromToConfigDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fromToConfigDo) Offset(offset int) *fromToConfigDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fromToConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *fromToConfigDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fromToConfigDo) Unscoped() *fromToConfigDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fromToConfigDo) Create(values ...*model.FromToConfig) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fromToConfigDo) CreateInBatches(values []*model.FromToConfig, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fromToConfigDo) Save(values ...*model.FromToConfig) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fromToConfigDo) First() (*model.FromToConfig, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FromToConfig), nil
	}
}

func (f fromToConfigDo) Take() (*model.FromToConfig, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FromToConfig), nil
	}
}

func (f fromToConfigDo) Last() (*model.FromToConfig, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FromToConfig), nil
	}
}

func (f fromToConfigDo) Find() ([]*model.FromToConfig, error) {
	result, err := f.DO.Find()
	return result.([]*model.FromToConfig), err
}

func (f fromToConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FromToConfig, err error) {
	buf := make([]*model.FromToConfig, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fromToConfigDo) FindInBatches(result *[]*model.FromToConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fromToConfigDo) Attrs(attrs ...field.AssignExpr) *fromToConfigDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fromToConfigDo) Assign(attrs ...field.AssignExpr) *fromToConfigDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fromToConfigDo) Joins(fields ...field.RelationField) *fromToConfigDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fromToConfigDo) Preload(fields ...field.RelationField) *fromToConfigDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fromToConfigDo) FirstOrInit() (*model.FromToConfig, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FromToConfig), nil
	}
}

func (f fromToConfigDo) FirstOrCreate() (*model.FromToConfig, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FromToConfig), nil
	}
}

func (f fromToConfigDo) FindByPage(offset int, limit int) (result []*model.FromToConfig, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fromToConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f *fromToConfigDo) withDO(do gen.Dao) *fromToConfigDo {
	f.DO = *do.(*gen.DO)
	return f
}
