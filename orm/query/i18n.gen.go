// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"drtech.co/gl2gl/orm/model"
)

func newI18n(db *gorm.DB) i18n {
	_i18n := i18n{}

	_i18n.i18nDo.UseDB(db)
	_i18n.i18nDo.UseModel(&model.I18n{})

	tableName := _i18n.i18nDo.TableName()
	_i18n.ALL = field.NewField(tableName, "*")
	_i18n.LangKey = field.NewString(tableName, "lang_key")
	_i18n.Key = field.NewString(tableName, "key")
	_i18n.Value = field.NewString(tableName, "value")
	_i18n.Memo = field.NewString(tableName, "memo")

	_i18n.fillFieldMap()

	return _i18n
}

type i18n struct {
	i18nDo i18nDo

	ALL     field.Field
	LangKey field.String
	Key     field.String
	Value   field.String
	Memo    field.String

	fieldMap map[string]field.Expr
}

func (i i18n) Table(newTableName string) *i18n {
	i.i18nDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i i18n) As(alias string) *i18n {
	i.i18nDo.DO = *(i.i18nDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *i18n) updateTableName(table string) *i18n {
	i.ALL = field.NewField(table, "*")
	i.LangKey = field.NewString(table, "lang_key")
	i.Key = field.NewString(table, "key")
	i.Value = field.NewString(table, "value")
	i.Memo = field.NewString(table, "memo")

	i.fillFieldMap()

	return i
}

func (i *i18n) WithContext(ctx context.Context) *i18nDo { return i.i18nDo.WithContext(ctx) }

func (i i18n) TableName() string { return i.i18nDo.TableName() }

func (i i18n) Alias() string { return i.i18nDo.Alias() }

func (i *i18n) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *i18n) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["lang_key"] = i.LangKey
	i.fieldMap["key"] = i.Key
	i.fieldMap["value"] = i.Value
	i.fieldMap["memo"] = i.Memo
}

func (i i18n) clone(db *gorm.DB) i18n {
	i.i18nDo.ReplaceDB(db)
	return i
}

type i18nDo struct{ gen.DO }

func (i i18nDo) Debug() *i18nDo {
	return i.withDO(i.DO.Debug())
}

func (i i18nDo) WithContext(ctx context.Context) *i18nDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i i18nDo) ReadDB() *i18nDo {
	return i.Clauses(dbresolver.Read)
}

func (i i18nDo) WriteDB() *i18nDo {
	return i.Clauses(dbresolver.Write)
}

func (i i18nDo) Clauses(conds ...clause.Expression) *i18nDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i i18nDo) Returning(value interface{}, columns ...string) *i18nDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i i18nDo) Not(conds ...gen.Condition) *i18nDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i i18nDo) Or(conds ...gen.Condition) *i18nDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i i18nDo) Select(conds ...field.Expr) *i18nDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i i18nDo) Where(conds ...gen.Condition) *i18nDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i i18nDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *i18nDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i i18nDo) Order(conds ...field.Expr) *i18nDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i i18nDo) Distinct(cols ...field.Expr) *i18nDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i i18nDo) Omit(cols ...field.Expr) *i18nDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i i18nDo) Join(table schema.Tabler, on ...field.Expr) *i18nDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i i18nDo) LeftJoin(table schema.Tabler, on ...field.Expr) *i18nDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i i18nDo) RightJoin(table schema.Tabler, on ...field.Expr) *i18nDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i i18nDo) Group(cols ...field.Expr) *i18nDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i i18nDo) Having(conds ...gen.Condition) *i18nDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i i18nDo) Limit(limit int) *i18nDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i i18nDo) Offset(offset int) *i18nDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i i18nDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *i18nDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i i18nDo) Unscoped() *i18nDo {
	return i.withDO(i.DO.Unscoped())
}

func (i i18nDo) Create(values ...*model.I18n) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i i18nDo) CreateInBatches(values []*model.I18n, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i i18nDo) Save(values ...*model.I18n) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i i18nDo) First() (*model.I18n, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.I18n), nil
	}
}

func (i i18nDo) Take() (*model.I18n, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.I18n), nil
	}
}

func (i i18nDo) Last() (*model.I18n, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.I18n), nil
	}
}

func (i i18nDo) Find() ([]*model.I18n, error) {
	result, err := i.DO.Find()
	return result.([]*model.I18n), err
}

func (i i18nDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.I18n, err error) {
	buf := make([]*model.I18n, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i i18nDo) FindInBatches(result *[]*model.I18n, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i i18nDo) Attrs(attrs ...field.AssignExpr) *i18nDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i i18nDo) Assign(attrs ...field.AssignExpr) *i18nDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i i18nDo) Joins(fields ...field.RelationField) *i18nDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i i18nDo) Preload(fields ...field.RelationField) *i18nDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i i18nDo) FirstOrInit() (*model.I18n, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.I18n), nil
	}
}

func (i i18nDo) FirstOrCreate() (*model.I18n, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.I18n), nil
	}
}

func (i i18nDo) FindByPage(offset int, limit int) (result []*model.I18n, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i i18nDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i i18nDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i *i18nDo) withDO(do gen.Dao) *i18nDo {
	i.DO = *do.(*gen.DO)
	return i
}
