// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"drtech.co/gl2gl/orm/model"
)

func newLang(db *gorm.DB) lang {
	_lang := lang{}

	_lang.langDo.UseDB(db)
	_lang.langDo.UseModel(&model.Lang{})

	tableName := _lang.langDo.TableName()
	_lang.ALL = field.NewField(tableName, "*")
	_lang.Key = field.NewString(tableName, "key")
	_lang.Memo = field.NewString(tableName, "memo")

	_lang.fillFieldMap()

	return _lang
}

type lang struct {
	langDo langDo

	ALL  field.Field
	Key  field.String
	Memo field.String

	fieldMap map[string]field.Expr
}

func (l lang) Table(newTableName string) *lang {
	l.langDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lang) As(alias string) *lang {
	l.langDo.DO = *(l.langDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lang) updateTableName(table string) *lang {
	l.ALL = field.NewField(table, "*")
	l.Key = field.NewString(table, "key")
	l.Memo = field.NewString(table, "memo")

	l.fillFieldMap()

	return l
}

func (l *lang) WithContext(ctx context.Context) *langDo { return l.langDo.WithContext(ctx) }

func (l lang) TableName() string { return l.langDo.TableName() }

func (l lang) Alias() string { return l.langDo.Alias() }

func (l *lang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lang) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["key"] = l.Key
	l.fieldMap["memo"] = l.Memo
}

func (l lang) clone(db *gorm.DB) lang {
	l.langDo.ReplaceDB(db)
	return l
}

type langDo struct{ gen.DO }

func (l langDo) Debug() *langDo {
	return l.withDO(l.DO.Debug())
}

func (l langDo) WithContext(ctx context.Context) *langDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l langDo) ReadDB() *langDo {
	return l.Clauses(dbresolver.Read)
}

func (l langDo) WriteDB() *langDo {
	return l.Clauses(dbresolver.Write)
}

func (l langDo) Clauses(conds ...clause.Expression) *langDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l langDo) Returning(value interface{}, columns ...string) *langDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l langDo) Not(conds ...gen.Condition) *langDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l langDo) Or(conds ...gen.Condition) *langDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l langDo) Select(conds ...field.Expr) *langDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l langDo) Where(conds ...gen.Condition) *langDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l langDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *langDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l langDo) Order(conds ...field.Expr) *langDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l langDo) Distinct(cols ...field.Expr) *langDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l langDo) Omit(cols ...field.Expr) *langDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l langDo) Join(table schema.Tabler, on ...field.Expr) *langDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l langDo) LeftJoin(table schema.Tabler, on ...field.Expr) *langDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l langDo) RightJoin(table schema.Tabler, on ...field.Expr) *langDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l langDo) Group(cols ...field.Expr) *langDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l langDo) Having(conds ...gen.Condition) *langDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l langDo) Limit(limit int) *langDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l langDo) Offset(offset int) *langDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l langDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *langDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l langDo) Unscoped() *langDo {
	return l.withDO(l.DO.Unscoped())
}

func (l langDo) Create(values ...*model.Lang) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l langDo) CreateInBatches(values []*model.Lang, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l langDo) Save(values ...*model.Lang) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l langDo) First() (*model.Lang, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lang), nil
	}
}

func (l langDo) Take() (*model.Lang, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lang), nil
	}
}

func (l langDo) Last() (*model.Lang, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lang), nil
	}
}

func (l langDo) Find() ([]*model.Lang, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lang), err
}

func (l langDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lang, err error) {
	buf := make([]*model.Lang, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l langDo) FindInBatches(result *[]*model.Lang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l langDo) Attrs(attrs ...field.AssignExpr) *langDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l langDo) Assign(attrs ...field.AssignExpr) *langDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l langDo) Joins(fields ...field.RelationField) *langDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l langDo) Preload(fields ...field.RelationField) *langDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l langDo) FirstOrInit() (*model.Lang, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lang), nil
	}
}

func (l langDo) FirstOrCreate() (*model.Lang, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lang), nil
	}
}

func (l langDo) FindByPage(offset int, limit int) (result []*model.Lang, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l langDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l langDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l *langDo) withDO(do gen.Dao) *langDo {
	l.DO = *do.(*gen.DO)
	return l
}
